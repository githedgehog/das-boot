variant: flatcar
version: 1.0.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - $(< ${DEV_DIR}/core-ssh-key.pub)
      groups:
        - wheel
      shell: /bin/bash
systemd:
  units:
    - name: k3s-install.service
      enabled: true 
      contents: |
        [Unit]
        Description=Run k3s installation script
        Wants=network-online.target
        After=network.target network-online.target
        ConditionPathExists=/opt/k3s-install.sh
        ConditionPathExists=!/opt/bin/k3s

        [Service]
        Type=oneshot
        TimeoutStartSec=180
        RemainAfterExit=yes
        KillMode=process
        ExecStart=/usr/bin/sh -c '/opt/k3s-install.sh server --cluster-init --disable=traefik â€”cluster-cidr "10.42.0.0/16" --service-cidr "10.43.0.0/16" --cluster-dns "10.43.0.10" --write-kubeconfig-mode 644 --tls-san "kube-master.local" --tls-san "control-node-1.local" --tls-san "192.168.42.1"'
        
        [Install]
        WantedBy=multi-user.target
    - name: helm-install.service
      enabled: true 
      contents: |
        [Unit]
        Description=Run helm installation script
        Wants=network-online.target
        After=network.target network-online.target
        ConditionPathExists=/opt/helm-install.sh
        ConditionPathExists=!/opt/bin/helm

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="HELM_INSTALL_DIR=/opt/bin"
        Environment="USE_SUDO=false"
        Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin"
        ExecStart=/usr/bin/sh -c "/opt/helm-install.sh"
        
        [Install]
        WantedBy=multi-user.target
    - name: import-ca-certs.service
      enabled: true 
      contents: |
        [Unit]
        Description=Imports necessary CA certificates
        Wants=network-online.target
        After=network.target network-online.target
        ConditionPathExists=/opt/import-ca-certs.sh
        ConditionPathExists=!/opt/ca-certs-imported

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/sh -c "/opt/import-ca-certs.sh"
        
        [Install]
        WantedBy=multi-user.target
    - name: docker-image-import.service
      enabled: true
      contents: |
        [Unit]
        Description=Imports docker images
        Requisite=k3s-install.service k3s.service
        After=k3s-install.service k3s.service
        ConditionPathExists=/opt/docker-image-import.sh
        ConditionPathExists=!/opt/docker-images-imported

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c "/opt/docker-image-import.sh"

        [Install]
        WantedBy=multi-user.target
    - name: seeder-install.service
      enabled: true 
      contents: |
        [Unit]
        Description=Run seeder helm installation script
        Requisite=k3s-install.service k3s.service helm-install.service import-ca-certs.service docker-image-import.service
        After=network.target network-online.target
        ConditionPathExists=/opt/install_seeder.sh
        ConditionPathExists=!/opt/seeder/installed

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/bin"
        ExecStart=/usr/bin/sh -c "/opt/install_seeder.sh"
        
        [Install]
        WantedBy=multi-user.target
storage:
  files:
    # disable updates - we really don't care on a dev machine
    # they are just annoying here at the moment
    # it disables them by setting the server to an invalid value
    # yes, I know, but even Flatcar says to do so
    # source: https://www.flatcar.org/docs/latest/setup/releases/update-strategies/#disable-automatic-updates
    - path: /etc/flatcar/update.conf
      mode: 0644
      contents:
        inline: |
                    SERVER=disabled
    # set a great hostname
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: control-node-1
    # this gives us access to the docker registry running on the dev laptop, not in the VM
    - path: /etc/hosts
      mode: 0644
      overwrite: true
      contents:
        source: http://10.0.2.2:8888/hosts
    # network configuration
    - path: /etc/systemd/network/01-control1.netdev 
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=control1
          Kind=macvlan
          #Kind=vlan

          [MACVLAN]
          Mode=private

          #[VLAN]
          #Id=42
    - path: /etc/systemd/network/01-control1.network 
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=control1
          Kind=macvlan
          #Kind=vlan

          [Network]
          Bridge=bridge0

          [Bridge]
          Isolated=yes
    - path: /etc/systemd/network/01-control2.netdev 
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=control2
          Kind=macvlan
          #Kind=vlan

          [MACVLAN]
          Mode=private

          #[VLAN]
          #Id=42
    - path: /etc/systemd/network/01-control2.network 
      mode: 0644
      contents:
        inline: |
          [Match]
          Name=control2
          Kind=macvlan
          #Kind=vlan

          [Network]
          Bridge=bridge0

          [Bridge]
          Isolated=yes
    - path: /etc/systemd/network/03-bridge.netdev 
      mode: 0644
      contents:
        inline: |
          [NetDev]
          Name=bridge0
          Kind=bridge

          [Bridge]
          DefaultPVID=none
          VLANFiltering=no
    - path: /etc/systemd/network/03-bridge.network 
      mode: 0644
      contents:
        inline: |
          # We essentially want all ethernet links
          # but NOT eth0 which is the QEMU user NIC
          [Match]
          Name=bridge0
          Kind=bridge

          [Link]
          RequiredForOnline=no
          
          [Network]
          Address=192.168.42.1/24
          LinkLocalAddressing=no
          LLDP=no
          EmitLLDP=no
          IPv6AcceptRA=no
          IPv6SendRA=no
    - path: /etc/systemd/network/11-switch1.link
      mode: 0644
      contents:
        inline: |
          # Make sure you match that with the QEMU mac address
          # for the NIC which connects to switch1
          [Match]
          MACAddress=0c:20:12:fe:00:01
          Type=ether
          
          [Link]
          Name=switch1
          Description=Connected to switch1
    - path: /etc/systemd/network/11-switch1.network
      mode: 0644
      contents:
        inline: |
          # Make sure you match that with the QEMU mac address
          # for the NIC which connects to switch2
          [Match]
          Name=switch1
          Type=ether

          [Network]
          MACVLAN=control1
          #VLAN=control1
          LinkLocalAddressing=ipv6
          LLDP=yes
          EmitLLDP=yes
          IPv6AcceptRA=yes
          IPv6SendRA=yes
    - path: /etc/systemd/network/12-switch2.link
      mode: 0644
      contents:
        inline: |
          # Make sure you match that with the QEMU mac address
          # for the NIC which connects to switch2
          [Match]
          MACAddress=0c:20:12:fe:00:02
          Type=ether
          
          [Link]
          Name=switch2
          Description=Connected to switch2
    - path: /etc/systemd/network/12-switch2.network
      mode: 0644
      contents:
        inline: |
          # Make sure you match that with the QEMU mac address
          # for the NIC which connects to switch2
          [Match]
          Name=switch2
          Type=ether

          [Network]
          MACVLAN=control2
          #VLAN=control2
          LinkLocalAddressing=ipv6
          LLDP=yes
          EmitLLDP=yes
          IPv6AcceptRA=yes
          IPv6SendRA=yes
    # now all installation files, etc.pp.
    - path: /opt/k3s-install.sh
      mode: 0755
      contents:
        # This is currently broken upstream. See https://github.com/k3s-io/k3s/issues/7247 for details.
        #source: https://get.k3s.io
        source: https://raw.githubusercontent.com/k3s-io/k3s/7e59376bb91d451d3eaf16b9a3f80ae4d711b2bc/install.sh
    - path: /opt/helm-install.sh
      mode: 0755
      contents:
        source: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - path: /opt/bin/yq
      mode: 0755
      contents:
        source: https://github.com/mikefarah/yq/releases/download/v4.33.2/yq_linux_amd64
    - path: /opt/docker-images/docker-seeder.tar
      mode: 0644
      contents:
        source: http://10.0.2.2:8889/docker-seeder.tar
    - path: /opt/docker-images/docker-registration-controller.tar
      mode: 0644
      contents:
        source: http://10.0.2.2:8889/docker-registration-controller.tar
    - path: /opt/docker-images/docker-syslog.tar
      mode: 0644
      contents:
        source: http://10.0.2.2:8889/docker-syslog.tar
    - path: /opt/docker-images/docker-ntp.tar
      mode: 0644
      contents:
        source: http://10.0.2.2:8889/docker-ntp.tar
    - path: /opt/docker-image-import.sh
      mode: 0755
      contents:
        source: http://10.0.2.2:8888/docker-image-import.sh
    - path: /opt/import-ca-certs.sh
      mode: 0755
      contents:
        source: http://10.0.2.2:8888/import_ca_certs.sh
    - path: /opt/oci-repo-ca-cert.pem
      mode: 0644
      contents:
        source: http://10.0.2.2:8889/oci-repo-ca-cert.pem
    - path: /opt/install_seeder.sh
      mode: 0755
      contents:
        source: http://10.0.2.2:8888/install_seeder.sh
    - path: /opt/seeder/das-boot-seeder-values.yaml
      mode: 0644
      contents:
        source: http://10.0.2.2:8888/das-boot-seeder-values.yaml
    - path: /opt/seeder/das-boot-registration-controller-values.yaml
      mode: 0644
      contents:
        source: http://10.0.2.2:8888/das-boot-registration-controller-values.yaml
    - path: /opt/seeder/das-boot-client-ca-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/das-boot-client-ca-secret.yaml
    - path: /opt/seeder/das-boot-config-ca-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/das-boot-config-ca-secret.yaml
    - path: /opt/seeder/das-boot-config-cert-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/das-boot-config-cert-secret.yaml
    - path: /opt/seeder/das-boot-server-ca-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/das-boot-server-ca-secret.yaml
    - path: /opt/seeder/das-boot-server-cert-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/das-boot-server-cert-secret.yaml
    - path: /opt/seeder/oci-ca-secret.yaml
      mode: 0600
      contents:
        source: http://10.0.2.2:8889/oci-ca-secret.yaml
    - path: /opt/seeder/rsyslog-server-values.yaml
      mode: 0644
      contents:
        source: http://10.0.2.2:8888/rsyslog-server-values.yaml
    - path: /opt/seeder/ntp-values.yaml
      mode: 0644
      contents:
        source: http://10.0.2.2:8888/ntp-values.yaml
    - path: /opt/seeder/wiring.yaml
      mode: 0644
      contents:
        source: http://10.0.2.2:8888/wiring.yaml
